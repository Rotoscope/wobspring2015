using UnityEngine;

using System;
using System.Collections.Generic;

public class Functions {

	public static string ColorToHex(Color32 color) {
		return color.r.ToString("X2") + color.g.ToString("X2") + color.b.ToString("X2");
	}
	
	public static Color HexToColor(string hex) {
		byte r = byte.Parse(hex.Substring(0, 2), System.Globalization.NumberStyles.HexNumber);
		byte g = byte.Parse(hex.Substring(2, 2), System.Globalization.NumberStyles.HexNumber);
		byte b = byte.Parse(hex.Substring(4, 2), System.Globalization.NumberStyles.HexNumber);

		return new Color32(r, g, b, 255);
	}

	public static Texture2D CreateTexture2D(Color color) {
		return Functions.CreateTexture2D(color, 1, 1);
	}

	public static Texture2D CreateTexture2D(Color color, int width, int height) {
		Texture2D texture = new Texture2D(width, height);

		for (int x = 0; x < texture.height; x++) {
			for (int y = 0; y < texture.width; y++) {
				texture.SetPixel(x, y, color);
			}
		}

		texture.Apply();

		return texture;
	}
	
	public static void DrawBackground(Rect position, Texture image, float scale = 0.15f) {
		float texWidth = image.width * scale;

		GUI.BeginGroup(position);
			// Top Left Region
			GUI.DrawTextureWithTexCoords(new Rect(0, 0, texWidth, texWidth), image, new Rect(0, 1 - scale, scale, scale));
			// Top Center Region
			GUI.DrawTextureWithTexCoords(new Rect(texWidth, 0, position.width - texWidth * 2, texWidth), image, new Rect(1 - scale, 1 - scale, 0, scale));
			// Top Right Region
			GUI.DrawTextureWithTexCoords(new Rect(position.width - texWidth, 0, texWidth, texWidth), image, new Rect(1 - scale, 1 - scale, scale, scale));
			// Middle Left Region
			GUI.DrawTextureWithTexCoords(new Rect(0, texWidth, texWidth, position.height - texWidth * 2), image, new Rect(0, 1 - scale, scale, 0));
			// Middle Center Region
			GUI.DrawTextureWithTexCoords(new Rect(texWidth, texWidth, position.width - texWidth * 2, position.height - texWidth * 2), image, new Rect(0.5f, 0.5f, 0, 0));
			// Middle Right Region
			GUI.DrawTextureWithTexCoords(new Rect(position.width - texWidth, texWidth, texWidth, position.height - texWidth * 2), image, new Rect(1 - scale, 1 - scale, scale, 0));
			// Bottom Left Region
			GUI.DrawTextureWithTexCoords(new Rect(0, position.height - texWidth, texWidth, texWidth), image, new Rect(0, 0, scale, scale));
			// Bottom Center Region
			GUI.DrawTextureWithTexCoords(new Rect(texWidth, position.height - texWidth, position.width - texWidth * 2, texWidth), image, new Rect(1 - scale, 0, 0, scale));
			// Bottom Right Region
			GUI.DrawTextureWithTexCoords(new Rect(position.width - texWidth, position.height - texWidth, texWidth, texWidth), image, new Rect(1 - scale, 0, scale, scale));
		GUI.EndGroup();
	}

	public static void DrawBackground(Rect position, Texture image, Color color) {
		Color temp = GUI.color;

		GUI.color = color;
		Functions.DrawBackground(position, image);
		GUI.color = temp;
	}

	public static bool CanBeSeen(Camera camera, Vector3 position) {
		Vector3 point = camera.WorldToViewportPoint(position);
		return point.x >= 0 && point.x <= 1 && point.y >= 0 && point.y <= 1;
	}
	
	public static CSVObject ParseCSV(string csv) {
		CSVObject csvObject = new CSVObject();

		List<string> xAxisLabels = new List<string>(); // i.e. Months
		string[] rowList = csv.Split('\n');

		for (int i = 0; i < rowList.Length; i++) {
			if (rowList[i].Length <= 1) {
				continue;
			}

			string[] elements = rowList[i].Split(',');

			if (i == 0) { // Labels
				for (int j = 1; j < elements.Length; j++) {
					xAxisLabels.Add(elements[j]);
				}

				csvObject.xLabels = xAxisLabels;
			} else {
				string seriesLabel = "Untitled"; // i.e. Species
				List<string> values = new List<string>();

				for (int j = 0; j < elements.Length; j++) {
					if (j == 0) {
						seriesLabel = elements[0].Trim();
					} else {
						values.Add(elements[j].Trim());
					}
				}

				csvObject.csvList[seriesLabel] = values;
			}
		}

		return csvObject;
	}
}