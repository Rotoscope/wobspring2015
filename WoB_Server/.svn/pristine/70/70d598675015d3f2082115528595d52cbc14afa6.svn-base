/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package simulation;

import core.ServerResources;
import db.ConsumeDAO;
import static java.lang.Integer.max;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import model.SpeciesType;

/**
 * Limits predator/prey information to current ecosystem
 * @author justinacotter
 */
public class RelationTable {

    //actually two tables: distance and relationship
    int[][] distance;  //how distance is relationship btwn nodes?
    String[][] relationship;  //what is pred/prey relationship btwn nodes?
    int nodeCnt;
    int maxDist;
    List<Integer> nodeList;
    int[] linkCnt;
    ConsumeTable consumeTable;
    static final int notProcessed = -1;
    static final String isCannibal = "c";
    static final String isPrey = "y";
    static final String isPredator = "d";

    public RelationTable(ConsumeTable consumeTable, int[] nodeArray, 
            int eco_type) throws SQLException {
        this.nodeCnt = nodeArray.length;
        this.maxDist = 0;
        this.nodeList = new ArrayList<>();
        this.linkCnt = new int[nodeCnt];
        this.relationship = new String[nodeCnt][nodeCnt];
        this.distance = new int[nodeCnt][nodeCnt];
        this.consumeTable = consumeTable;
        
        //initialize nodeList and arrays
        for (int i=0; i < nodeCnt; i++) {
            linkCnt[i] = 0;
            this.nodeList.add(nodeArray[i]);
            for (int j=0; j < nodeCnt; j++) {
                this.distance[i][j] = notProcessed;
                this.relationship[i][j] = "";
            }
        }

        //build relationship and distance arrays
        List<Integer> preyList;
        for (Integer predId : nodeList) {
            int predIdx = nodeList.indexOf(predId);
            preyList = consumeTable.getPreyList(predId);
            
            //if not already processed via a recursive call, determine relns
            if (distance[predIdx][predIdx] == notProcessed) {
               setRelationships(predId, preyList, distance, relationship);
            }
            
            for (int j=0; j < nodeCnt; j++) {
                maxDist = max(maxDist, distance[predIdx][j]);
            }
        }
    }

    /*recursive function to find all relationships - drill down until no prey
    are found.
    */
    private void setRelationships (int predId, List<Integer> preyList,
            int[][] distance, String[][] relationship) {
        
        //loop through nodes in list and add to create map of preyIds
        List<Integer> preyOfPrey;
        int predIdx = nodeList.indexOf(predId);
        //set distance before recursive call to prevent infinite loop
        //in case species is cannibalistic;
        //also sets distance for species w/o prey (empty preyList)
        distance[predIdx][predIdx] = 0;

        //loop through prey to get/set relationships
        for (Integer preyId : preyList) {
            int preyIdx = nodeList.indexOf(preyId);
            preyOfPrey = consumeTable.getPreyList(preyId);
            
            //if node is a predator, loop through it's prey - Unless it has
            //already been processed
            if (notProcessed == distance[preyIdx][preyIdx]) {
                setRelationships (preyId, preyOfPrey, distance, relationship);
            }

            //set values now that any prey have been processed
            if (predIdx == preyIdx) {  //cannibal!
                relationship[predIdx][predIdx] = isCannibal;
                linkCnt[predIdx]++;
                //distance set above
            } else {
                relationship[predIdx][preyIdx] = isPredator;
                distance[predIdx][preyIdx] = 1;
                linkCnt[predIdx]++;
                relationship[preyIdx][predIdx] = isPrey;
                distance[preyIdx][predIdx] = 1;
                linkCnt[preyIdx]++;
            }
            
            //set relationships between predator and current prey's relationships
            for (Integer preyOfPreyId : preyOfPrey) {
                int preyOfPreyIdx = preyOfPrey.indexOf(preyOfPreyId);
                /*have to account for possibility that there are multiple paths
                between species - using shortest distance
                */
                //predator to prey-of-prey relationship/distance
                if (distance[predIdx][preyOfPreyIdx] == notProcessed ||
                        distance[predIdx][preyOfPreyIdx] > 
                        distance[preyIdx][preyOfPreyIdx] + 1) {
                    distance[predIdx][preyOfPreyIdx] = distance[preyIdx][preyOfPreyIdx] + 1;
                    relationship[predIdx][preyOfPreyIdx] = isPredator + 
                            relationship[preyIdx][preyOfPreyIdx];
                }
                //prey-of-prey to predator relationship/distance
                if (distance[preyOfPreyIdx][predIdx] == notProcessed ||
                        distance[preyOfPreyIdx][predIdx] > 
                        distance[preyOfPreyIdx][preyIdx] + 1) {
                    distance[preyOfPreyIdx][predIdx] = distance[preyOfPreyIdx][preyIdx] + 1;
                    relationship[preyOfPreyIdx][predIdx] =  
                            relationship[preyOfPreyIdx][preyIdx] + isPrey;
                }
            }

        }
    }

    public String toString() {
        //create header
        String stringRep = "node,#links,";
        String nodeListStr = "";
        for (Integer nodeId : nodeList) {
            nodeListStr = nodeListStr.concat(String.format("%d,", nodeId));
        }
        //need nodeList twice, once for relations, once for distance
        stringRep = stringRep.concat(nodeListStr).concat(nodeListStr);
        //remove trailing comma and add line return
        stringRep = stringRep.substring(0, stringRep.length() - 1).concat("\n");
        
        //create columns
        for (Integer rowId : nodeList) {
            // start with row node and link count
            stringRep = stringRep.concat(String.format("%d,%d,", rowId, 
                    linkCnt[nodeList.indexOf(rowId)]));
            
            //add relationships
            for (Integer colId : nodeList) {
                stringRep = stringRep.concat(String.format("%s,",
                    relationship[nodeList.indexOf(rowId)][nodeList.indexOf(colId)]));
            }            
        
            //add distances
            for (Integer colId : nodeList) {
                stringRep = stringRep.concat(String.format("%d,",
                    distance[nodeList.indexOf(rowId)][nodeList.indexOf(colId)]));
            }
            
            //replace terminal comma with a line return
            stringRep = stringRep.substring(0, stringRep.length() - 1).concat("\n");
        }
        
        return (stringRep);
    }
}
