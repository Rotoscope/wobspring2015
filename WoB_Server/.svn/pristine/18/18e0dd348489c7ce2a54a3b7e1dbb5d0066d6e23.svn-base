package simulation;

import java.util.logging.Level;
import java.util.logging.Logger;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map.Entry;
import java.util.Random;
import java.sql.SQLException;

import metadata.Constants;
import core.ServerResources;
import model.SpeciesType;
import db.SimJobDAO;

/**
 * SimJobManager manages and submits simulation jobs to the simulation engine.
 * An instance of SimJobManager manages a single simulation job. SimJobManager
 * contains the methods to generate a random simulation based on some underlying
 * rules to make the success of the simulation more likely, such as including
 * grass (amount specified by user), and random amounts of 3 additional species:
 * decaying material, a random herbivorous animal, and a random insect. User may
 * specify multiple random simulations, in which case a loop is run until the
 * specified number of simulations has been submitted. (Only one job is active
 * at any time.) Note: SpeciesZoneType container was set up as an ArrayList but
 * in retrospect should really be a HashMap.
 *
 * @author Justina
 */
public final class SimJobManager {

    private class RandomGen {

        private Random random;

        public RandomGen() {
            this(System.currentTimeMillis());
        }

        public RandomGen(long seed) {
            this.random = new Random(seed);
        }

        public synchronized double getNextDouble() {
            return random.nextDouble();
        }

        public synchronized int getNextInt(int n) {
            return random.nextInt(n);
        }
    }

    enum RandomRule {

        HERBIVORE, INSECT, RANDOM
    }

    //PP = PRIMARY PRODUCER (AKA GRASS)
    public static final double DFLT_PP_TOTAL_BIOMASS = 2000.0;
    public static final double DFLT_PP_PER_UNIT_BIOMASS = 1;
    public static final double DFLT_PP_PARAMK = 10000.0;  //k=carrying capacity  (SEConfig properties dflt = 1.0)
    public static double DFLT_PP_PARAMX = 0.5;  //x=metabolic rate (init 0.5, from SEConfig properties)
    public static double DFLT_PP_PARAMR = 1.0;  //r=growth rate (init 1.0, from SEConfig properties)
    //not currently used...
    public static final double DFLT_PP_AR = 1.0;
    public static final double DFLT_PP_FR = 0.1;

    public static final int DFLT_MAX_BIOMASS_COEFF = 3000;   //5000;  //10000.0
    public static final int DFLT_TIMESTEPS = 20;
    public static final int DFLT_MIN_SPECIES = 20;
    public static final int DFLT_MAX_SPECIES = 20;

    public static final int[] PLANT_SPECIES_ID = {1007, 1008, 1009};
    public static final int DECAY_SPECIES_ID = 89;

    private double ppTotalBiomass, ppPerUnitBiomass;
    private double ppAR, ppFR, ppParamX, ppParamK, ppParamR;
    private int maxBiomassCoeff;
    private int timesteps, minSpecies, maxSpecies;
    private int numJobs = 1;
    /*9/29/14, jtc, make it optional to include base ecosystem species.  The functionality
     exists to increase likelihood of viable predator/prey relationships into the i
     initial ecosystem*/
    private boolean randCreateBaseEcosys = false;

    private RandomGen rand;
    private SimulationEngine simEngine;
    private SimJob job;
    private String manipId;

    public SimJobManager() {
        job = null;
        this.simEngine = newSimEngine();
    }

    public SimulationEngine newSimEngine() {
        this.simEngine = new SimulationEngine();
        return this.simEngine;
    }

    public SimulationEngine getSimEngine() {
        return this.simEngine;
    }

    public SimJob createSimJob() {
        if (job == null) {
            job = new SimJob(simEngine);
        }
        return job;
    }

    //create new sim job based on existing job's ID
    //9/25/14, JTC, added saveAsNew arg
    public SimJob createSimJob(int job_id, boolean saveAsNew) throws SQLException {
        job = SimJobDAO.loadJobNoHistory(job_id, simEngine, saveAsNew);
        return job;
    }

    /*one species has multiple nodes; need to break into individual nodes for use
     by simulation engine. */
    private List<SpeciesZoneType> addNodesFromRandomSpecies(int species_id, double biomass) {
        //9/25/14, JTC, integration with Gary's code (ServerResources)
        SpeciesType st = ServerResources.getSpeciesTable().getSpecies(species_id);
        int nodeId;
        double perUnitBiomass;
        float distrib;
        SimTestNode stn;
        List<SpeciesZoneType> sztList = new ArrayList<SpeciesZoneType>();
        SimJobSZT szt;
        for (Entry<Integer, Float> nodeDistr : st.getNodeDistribution().entrySet()) {
            nodeId = nodeDistr.getKey();
            distrib = nodeDistr.getValue();
            stn = st.getSimTestNode(nodeId);
            perUnitBiomass = stn.getPerUnitBiomass();
            biomass = Math.max(biomass, perUnitBiomass * 2);
            /*if node already exists (should only happen for multi-node plants),
             just update biomass*/
            szt = job.getSpeciesZoneByNodeId(nodeId);
            if (szt != null) {
                szt.setCurrentBiomass(szt.getCurrentBiomass() + biomass * distrib);
            } else {
                szt = new SimJobSZT("", nodeId, 0, perUnitBiomass,
                        biomass * distrib, null);
                sztList.add(szt);
            }
        }
        return sztList;
    }

    /*create a random job with a few rules: must include grass, must include a vertebrate
     herbivore, must include an insect*/
    public void createRandomSimJob() {
        rand = new RandomGen();
        //9/25/14, JTC, integration with Gary's code (ECOSYSTEM_TYPE)
        List<Integer> speciesIdList = SpeciesType.getSpeciesIdList("", Constants.ECOSYSTEM_TYPE);

        int speciesCnt = rand.getNextInt(maxSpecies - minSpecies + 1) + minSpecies;

        //add primary producer information
        job.getSpeciesZoneList().addAll(addNodesFromRandomSpecies(Constants.PP_SPECIES_ID,
                ppTotalBiomass));
        //job may have overrides for default values for per-unit-biomass, param K (carrying capacity)
        job.getSpeciesZoneByNodeId(Constants.PP_NODE_ID).setPerSpeciesBiomass(ppPerUnitBiomass);
        job.getSpeciesZoneByNodeId(Constants.PP_NODE_ID).setParamK(ppParamK);

        int entries = 1;
        //9/29/14, jtc, if flag is set to create base ecosystem for random sim jobs, do so.
        if (randCreateBaseEcosys) {
        //select an herbivore
            //9/25/14, JTC, integration with Gary's code (ECOSYSTEM_TYPE)
            job.getSpeciesZoneList().addAll(addNodesFromRandomSpecies(
                    getRandomSpeciesNode(
                            SpeciesType.getSpeciesIdList(
                                    "`diet_type`=2 AND (`category`='Large Animal' OR `category`='Small Animal')",
                                    Constants.ECOSYSTEM_TYPE)),
                    getRandomBiomass()));

        //select an insect
            //9/25/14, JTC, integration with Gary's code (ECOSYSTEM_TYPE)
            job.getSpeciesZoneList().addAll(addNodesFromRandomSpecies(
                    getRandomSpeciesNode(
                            SpeciesType.getSpeciesIdList("`category`='Insect'", Constants.ECOSYSTEM_TYPE)),
                    getRandomBiomass()));

            //select a random non-pp plant species
            job.getSpeciesZoneList().addAll(addNodesFromRandomSpecies(
                    PLANT_SPECIES_ID[rand.getNextInt(PLANT_SPECIES_ID.length)],
                    getRandomBiomass()));

            //select some decaying matter
            job.getSpeciesZoneList().addAll(addNodesFromRandomSpecies(DECAY_SPECIES_ID,
                    getRandomBiomass()));

            entries += 4;
        }
        //select random species and random biomass for that species
        while (entries < speciesCnt) {
            job.getSpeciesZoneList().addAll(addNodesFromRandomSpecies(
                    getRandomSpeciesNode(speciesIdList), getRandomBiomass()));
            entries++;
        }
        //initialize all animal metabolic rates via calculation
        /*10/5/14, JTC, want to use met rate in species table; loaded via SZT by
        default.
        job.setSpeciesZoneListAnimalParamX();
        */

        System.out.printf("Created %d species, %d nodes.\n", entries,
                job.getSpeciesZoneList().size());
    }

    private int getRandomBiomass() {
        return (int) (rand.getNextDouble() * (double) maxBiomassCoeff);
    }

    private int getRandomSpeciesNode(List<Integer> speciesIdList) {
        int speciesId = 0;
        boolean inUse = true;

        //make sure species hasn't already been selected
        while (inUse) {
            speciesId = speciesIdList.get(rand.getNextInt(speciesIdList.size()));

            if (job.getSpeciesZoneBySpeciesId(speciesId) != null) {
                continue;
            }
            inUse = false;
        }
        return speciesId;
    }

    public void setPpTotalBiomass(double ppTotalBiomass) {
        this.ppTotalBiomass = ppTotalBiomass;
    }

    public void setPpPerUnitBiomass(double ppPerUnitBiomass) {
        this.ppPerUnitBiomass = ppPerUnitBiomass;
    }

    public void setPpAR(double ppAR) {
        this.ppAR = ppAR;
    }

    public void setPpFR(double ppFR) {
        this.ppFR = ppFR;
    }

    public void setPpParamX(double ppParamX) {
        this.ppParamX = ppParamX;
    }

    public void setPpParamK(double ppParamK) {
        this.ppParamK = ppParamK;
    }

    public void setPpParamR(double ppParamR) {
        this.ppParamR = ppParamR;
    }

    public void setMaxBiomassCoeff(int maxBiomassCoeff) {
        this.maxBiomassCoeff = maxBiomassCoeff;
    }

    public void setTimesteps(int timesteps) {
        this.timesteps = timesteps;
    }

    public void setMinSpecies(int minSpecies) {
        this.minSpecies = minSpecies;
    }

    public void setMaxSpecies(int maxSpecies) {
        this.maxSpecies = maxSpecies;
    }

    public void setNumJobs(int numJobs) {
        this.numJobs = numJobs;
    }

    public void setRandCreateBaseEcosys (boolean base) {
        this.randCreateBaseEcosys = base;
    }

    public double getPpTotalBiomass() {
        return ppTotalBiomass;
    }

    public double getPpPerUnitBiomass() {
        return ppPerUnitBiomass;
    }

    public double getPpAR() {
        return ppAR;
    }

    public double getPpFR() {
        return ppFR;
    }

    public double getPpParamX() {
        return ppParamX;
    }

    public double getPpParamK() {
        return ppParamK;
    }

    public double getPpParamR() {
        return ppParamR;
    }

    public int getMaxBiomassCoeff() {
        return maxBiomassCoeff;
    }

    public int getTimesteps() {
        return timesteps;
    }

    public int getMinSpecies() {
        return minSpecies;
    }

    public int getMaxSpecies() {
        return maxSpecies;
    }

    public int getNumJobs() {
        return numJobs;
    }

    public boolean getRandCreateBaseEcosys () {
        return this.randCreateBaseEcosys;
    }

    public SimJob getJob() {
        if (job == null) {
            job = new SimJob(simEngine);
        }
        return job;
    }

    public int createAndRunSimJob(SimJob newJob) throws SQLException, SimulationException {

        //If not job passed in, create random sim job
        if (newJob == null) {
            job = new SimJob(simEngine);
            job.setJob_Descript("Random simulation" + "-" + System.currentTimeMillis() % 100000);
            job.setTimesteps(timesteps);
            createRandomSimJob();
        } else {
            job = newJob;
        }

        //create string representation of node configuration settings
        try {
            job.buildNodeConfig();
        } catch (Exception ex) {
            Logger.getLogger(SimJobManager.class.getName()).log(Level.SEVERE, null, ex);
        }

        //run simulation - 3 main steps
        try {
            job.setManip_Timestamp((new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")).format(new Date()));
            int nextTimestep = 0;
            /*"runs" the simulation (execute ManipulationRequest), but with 0 timesteps, resulting in no
             biomass data.  Provides minimal data to create network: node IDs.  Same method as used for
             players to initialize their foodweb.*/
            int[] nodeListArray = job.getSpeciesNodeList();
            manipId = simEngine.createAndRunSeregenttiSubFoodweb(nodeListArray, job.getJob_Descript(), 0, 0, true);

            /*run timestep #1 (executeManipulationRequest); initializes all node and link parameters 
             that can affect manipulation*/
            simEngine.increaseMultipleSpeciesType(job.getSpeciesZoneList(), ++nextTimestep, false, manipId);

            /*runs manipulation timestep 2+ (executeManipulationRequest)*/
            simEngine.run(++nextTimestep, job.getTimesteps(), manipId, false);

            //save job with biomass information and job ID info
            job.setManipulation_Id(manipId);
            ConsumeTable consumeTable = new ConsumeTable(job.getSpeciesNodeList(),
                Constants.ECOSYSTEM_TYPE);
            RelationTable relationTable = new RelationTable(consumeTable, 
                    job.getSpeciesNodeList(), Constants.ECOSYSTEM_TYPE);
            job.setCsv("Manipulation_id: " + manipId + "\n\n"
                    + simEngine.getBiomassCSVString(manipId) + "\n\n" 
                    + consumeTable.toString() + "\n\n"
                    + relationTable.toString());

            /*save job - note: job may not have a job ID until this time as it is sql generated,
             so this must be done before CSV header is created below*/
            job.saveJob();

            //save biomass information to disk
            String header = "Job_id: " + String.valueOf(job.getJob_Id());
            simEngine.saveBiomassCSVFileSimJob(manipId, header, job.getCsv());

            //delete manipulation;
            simEngine.deleteManipulation(manipId);
            System.out.printf("Simulation Job %s, created job ID: %s\n",
                    job.getJob_Descript(), job.getJob_Id());

        } catch (SimulationException ex) {
            System.err.print("In SimJobManager - Simulation failed");
            simEngine.deleteManipulation(manipId);
            job.setManipulation_Id(null);
            job.setManip_Timestamp(null);
            job.setJob_Id(job.saveJob());
            System.err.println(" (Job ID " + job.getJob_Id() + ").");
            //throw new SimulationException(ex.getMessage());
        }

        return (job.getJob_Id());
    }
}
